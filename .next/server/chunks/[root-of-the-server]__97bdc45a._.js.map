{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/plaid/create-link-token/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // In a real implementation, you would use the Plaid client here\n    // For now, we'll create a mock response that matches Plaid's structure\n    \n    const mockLinkToken = `link-sandbox-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    return NextResponse.json({\n      link_token: mockLinkToken,\n      expiration: new Date(Date.now() + 30 * 60 * 1000).toISOString(), // 30 minutes\n      request_id: `req-${Date.now()}`\n    })\n    \n    /* \n    Real Plaid implementation would look like this:\n    \n    const plaidClient = new PlaidApi(configuration)\n    \n    const request = {\n      user: {\n        client_user_id: userId\n      },\n      client_name: 'MortgageMax',\n      products: [Products.Transactions, Products.Auth],\n      country_codes: [CountryCode.Us],\n      language: 'en',\n      webhook: process.env.PLAID_WEBHOOK_URL,\n      account_filters: {\n        depository: {\n          account_subtypes: ['checking', 'savings']\n        },\n        credit: {\n          account_subtypes: ['credit card']\n        }\n      }\n    }\n    \n    const response = await plaidClient.linkTokenCreate(request)\n    return NextResponse.json(response.data)\n    */\n    \n  } catch (error) {\n    console.error('Error creating link token:', error)\n    return NextResponse.json(\n      { error: 'Failed to create link token' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,gEAAgE;QAChE,uEAAuE;QAEvE,MAAM,gBAAgB,CAAC,aAAa,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;QAE7F,qBAAqB;QACrB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,YAAY;YACZ,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,MAAM,WAAW;YAC7D,YAAY,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI;QACjC;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BA,GAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}